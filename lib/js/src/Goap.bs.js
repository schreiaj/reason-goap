// Generated by BUCKLESCRIPT VERSION 2.2.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");

function stateToJs(param) {
  return {
          name: param[/* name */0],
          value: param[/* value */1]
        };
}

function stateFromJs(param) {
  return /* record */[
          /* name */param.name,
          /* value */param.value
        ];
}

function actionFromJs(action) {
  return /* record */[
          /* name */action.name,
          /* preconditions */List.map(stateFromJs, action.preconditions),
          /* results */List.map(stateFromJs, action.results),
          /* cost */action.cost
        ];
}

function worldFromJs(world) {
  return List.map(stateFromJs, world);
}

function stateIsValid(worldState, state) {
  var currentValue = List.find((function (x) {
          return +(x[/* name */0] === state[/* name */0]);
        }), worldState);
  return +(currentValue[/* value */1] === state[/* value */1]);
}

function actionIsValid(worldState, action) {
  return List.for_all((function (s) {
                return stateIsValid(worldState, s);
              }), action[/* preconditions */1]);
}

function applyResult(worldState, actionResult) {
  return List.map((function (x) {
                var match = +(x[/* name */0] === actionResult[/* name */0]);
                if (match !== 0) {
                  return actionResult;
                } else {
                  return x;
                }
              }), worldState);
}

function applyAction(worldState, action) {
  return List.fold_left(applyResult, worldState, action[/* results */2]);
}

function findValidActions(worldState, actions) {
  return List.filter((function (a) {
                  return actionIsValid(worldState, a);
                }))(actions);
}

function prioritizeActions(actions) {
  return List.sort((function (a, b) {
                return a[/* cost */3] - b[/* cost */3] | 0;
              }), actions);
}

function prioritizePlans(plans) {
  if (plans) {
    return List.hd(List.sort((function (a, b) {
                      return a[1] - b[1] | 0;
                    }), plans));
  } else {
    return /* tuple */[
            /* [] */0,
            -1,
            /* false */0
          ];
  }
}

function planCost(actions) {
  return List.fold_left((function (prev, a) {
                return prev + a[/* cost */3] | 0;
              }), 0, actions);
}

var checkWorld = Caml_obj.caml_equal;

function planDFS(actions, worldState, goalState, maxPlanLength, plan) {
  var solved = Caml_obj.caml_equal(worldState, goalState);
  var match = +(List.length(plan) > maxPlanLength);
  if (match !== 0) {
    return /* tuple */[
            plan,
            planCost(plan),
            solved
          ];
  } else if (solved !== 0) {
    return /* tuple */[
            plan,
            planCost(plan),
            solved
          ];
  } else {
    var validActions = prioritizeActions(findValidActions(worldState, actions));
    if (validActions) {
      var attempts = List.map((function (act) {
              return planDFS(actions, applyAction(worldState, act), goalState, maxPlanLength - 1 | 0, List.append(plan, /* :: */[
                              act,
                              /* [] */0
                            ]));
            }), validActions);
      if (attempts) {
        return prioritizePlans(attempts);
      } else {
        return /* tuple */[
                /* [] */0,
                -1,
                /* false */0
              ];
      }
    } else {
      return /* tuple */[
              /* [] */0,
              -1,
              /* false */0
            ];
    }
  }
}

exports.stateToJs = stateToJs;
exports.stateFromJs = stateFromJs;
exports.actionFromJs = actionFromJs;
exports.worldFromJs = worldFromJs;
exports.stateIsValid = stateIsValid;
exports.actionIsValid = actionIsValid;
exports.applyResult = applyResult;
exports.applyAction = applyAction;
exports.findValidActions = findValidActions;
exports.prioritizeActions = prioritizeActions;
exports.prioritizePlans = prioritizePlans;
exports.planCost = planCost;
exports.checkWorld = checkWorld;
exports.planDFS = planDFS;
/* No side effect */
